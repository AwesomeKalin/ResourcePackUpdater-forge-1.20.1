import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "de.undercouch.download" version "4.1.2"
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '+'
    id "org.spongepowered.mixin" version "+"
}

version = project.mod_version
group = project.maven_group

String default_minecraft_version = "1.20.1"
Properties localProperties = new Properties()
String minecraft_version
if (project.rootProject.file('build.properties').exists()) {
    localProperties.load(project.rootProject.file('build.properties').newDataInputStream())
}
if (localProperties.containsKey("MC_VERSION")) {
    String notDotted = localProperties.get("MC_VERSION")
    String dotted = notDotted.substring(0, 1) + "." +
            Integer.toString(Integer.parseInt(notDotted.substring(1, 3))) + "." +
            Integer.toString(Integer.parseInt(notDotted.substring(3, 5)))
    minecraft_version = dotted
} else {
    minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.properties.get("buildVersion") : default_minecraft_version
}
int minecraft_main_version = minecraft_version.split("\\.")[1] as int
String minecraft_version_int = minecraft_version.split("\\.")[0] +
        minecraft_version.split("\\.")[1].padLeft(2, '0') +
        (minecraft_version.split("\\.").length > 2 ? minecraft_version.split("\\.")[2].padLeft(2, '0') : "00")
boolean is_1_19_3 = minecraft_version == "1.19.3"

minecraft {
    mappings channel: "official", version: default_minecraft_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "resourcepackupdater" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', "resourcepackupdater"
        }

        server {
            property 'forge.enabledGameTestNamespaces', "resourcepackupdater"
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', "resourcepackupdater"
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', "resourcepackupdater", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    maven {
        name = "Forge"
        url = "https://maven.minecraftforge.net/"
    }
    mavenCentral()  // if you need other artifacts from Maven Central
}

dependencies {
    annotationProcessor 'systems.manifold:manifold-preprocessor:2023.1.0'
    minecraft "net.minecraftforge:forge:${default_minecraft_version}-47.3.0"
    annotationProcessor "org.spongepowered:mixin:+:processor"
}

mixin {
    add sourceSets.main, "resourcepackupdater.refmap.json"
    config "resourcepackupdater.mixins.json"
    debug.verbose = true
    debug.export = true
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (minecraft_main_version == 16) {
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(targetVersion)
        }
    } else if (minecraft_main_version == 17) {
        options.release.set(16)
    } else {
        options.release.set(17)
    }
    options.compilerArgs += ['-AMC_VERSION=' + minecraft_version_int]
}


task setupFiles() {
    download {
        src "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/1.${minecraft_main_version}${is_1_19_3 ? ".3" : ""}.zip"
        dest "src/main/java/cn/zbx1425/resourcepackupdater/mappings/files.zip"
        overwrite true
    }

    copy {
        outputs.upToDateWhen { false }
        from (zipTree("src/main/java/cn/zbx1425/resourcepackupdater/mappings/files.zip").matching {
                include "**/Text.java"
            }){ eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
        into "src/main/java/cn/zbx1425/resourcepackupdater/mappings"
        filter(ReplaceTokens, tokens: ["package": "cn.zbx1425.resourcepackupdater.mappings"])
    }

    ant.delete(file: "src/main/java/cn/zbx1425/resourcepackupdater/mappings/files.zip")
    ant.delete(dir: "src/main/java/cn/zbx1425/resourcepackupdater/mappings/Minecraft-Mappings-1.${minecraft_main_version}${is_1_19_3 ? ".3" : ""}")
}

afterEvaluate {
    rootProject.tasks.build.dependsOn rootProject.tasks.setupFiles
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name + "-" + minecraft_version
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
